

#include <akilcd/akilcd.h>
#include <Others/Others.h>
#include <MainCircit/Direction.h>
#include <MainCircit/Controller/ControllerBase/ControllerBase.h>

/************************************************************************/

namespace ClassController
{

/************************************************************************/
/*	ControllerBase														*/
/************************************************************************/

//----------------------------------------------------------------------//

ControllerBase :: ControllerBase()
{
	_mem_data._array[0] = 0x00;
	_mem_data._array[1] = 0xf0;
	_mem_data._array[2] = 0xff;
}

//----------------------------------------------------------------------//

void ControllerBase :: Clear()
{
	_mem_data._array[0] = 0x00;
	_mem_data._array[1] = 0xf0;
	_mem_data._array[2] = 0xff;
}

//----------------------------------------------------------------------//

YesNo ControllerBase::Is_commnad_push()
{
	if (_mem_data._all_data == 0xfff000)
	{
		return NO;
	}
	else
	{
		return YES;
	}
}

//----------------------------------------------------------------------//

/************************************************************************/
/*	ControllerGet														*/
/************************************************************************/

//----------------------------------------------------------------------//

ControllerGet :: ControllerGet()	{}

//----------------------------------------------------------------------//

ControllerData ControllerGet :: Get_data(const uByte _num)
{
	return
	(
		_num > 2 ? _mem_data._array[2] :
		_num < 0 ? _mem_data._array[0] :
		_mem_data._array[_num]
	);
}

//----------------------------------------------------------------------//

/************************************************************************/
/*	ControllerRewrite													*/
/************************************************************************/

//----------------------------------------------------------------------//

ControllerRewrite :: ControllerRewrite (const BOOL _is_poss_rewrite)
{
	_mem_is_rewritten = _is_poss_rewrite;
}

//----------------------------------------------------------------------//

void ControllerRewrite :: Rewrite_base(const usint _bit, const int _data, const int _and)
{
	_mem_data._all_data &= ~(_and  << _bit);
	_mem_data._all_data |=  (_data << _bit);
}

//----------------------------------------------------------------------//

/************************************************************************/
/*	ControllerPush														*/
/************************************************************************/

//----------------------------------------------------------------------//

ControllerPush :: ControllerPush ()
{
	_mem_stock._all._btns = 0;
	_mem_stock._all._directions = 0;
}

//----------------------------------------------------------------------//

/************************************************************************/
/*	ControllerLCD														*/
/************************************************************************/

//----------------------------------------------------------------------//

ControllerLCD :: ControllerLCD()
{
	if ( ! LCD::Is_initialize())
	{
		LCD::Initialize();
	}
}

//----------------------------------------------------------------------//

/************************************************************************/

};

/************************************************************************/
