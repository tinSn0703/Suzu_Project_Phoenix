
#include <avr/io.h>
#include <Others/Others.h>
#include <AVR/IO/Io.h>

/************************************************************************/

namespace IO
{

/************************************************************************/
/*	IoOut																*/
/************************************************************************/

//----------------------------------------------------------------------//

ModeOut :: ModeOut()	{}

//----------------------------------------------------------------------//

ModeOut :: ModeOut(const IoNum _io_adrs)

	: IoBase(_io_adrs, 0xff)
{}

//----------------------------------------------------------------------//

void IO::ModeOut :: Reset(const IoNum _io_adrs)
{
	Initialize(_io_adrs, 0xff);
}

//----------------------------------------------------------------------//

/************************************************************************/
/*	IoIn																*/
/************************************************************************/

//----------------------------------------------------------------------//

ModeIn :: ModeIn()	{}

//----------------------------------------------------------------------//

ModeIn :: ModeIn(const IoNum _io_adrs)

	: IoBase(_io_adrs, 0x00)
{}

//----------------------------------------------------------------------//

void IO::ModeIn :: Reset(const IoNum _io_adrs)
{
	Initialize(_io_adrs, 0x00);
}

//----------------------------------------------------------------------//

/************************************************************************/

namespace Bit
{

/************************************************************************/

//----------------------------------------------------------------------//

ModeOut :: ModeOut()	{}

//----------------------------------------------------------------------//

ModeOut :: ModeOut(const IoNum _io_adrs, const IoBit _bit)

	: IoBase(_io_adrs, _bit, TRUE)
{}

//----------------------------------------------------------------------//

void ModeOut :: Reset(const IoNum _io_adrs, const IoBit _bit)
{
	Initialize(_io_adrs, _bit, TRUE);
	
	_mem_bit = _bit;
}

//----------------------------------------------------------------------//

/************************************************************************/
/*	IoInBit																*/
/************************************************************************/

//----------------------------------------------------------------------//

ModeIn :: ModeIn()
{
	_mem_read_data = LOW;
	
	_mem_is_read_reverse = NO;
}

//----------------------------------------------------------------------//

ModeIn :: ModeIn(const IoNum _io_adrs, const IoBit _bit)

	: IoBase(_io_adrs, _bit, FALSE)
{
	_mem_read_data = LOW;
	
	_mem_is_read_reverse = NO;
	
	_mem_bit = _bit;
}

//----------------------------------------------------------------------//

void ModeIn :: Reset(const IoNum _io_adrs, const IoBit _bit)
{
	Initialize(_io_adrs, _bit, FALSE);
	
	_mem_bit = _bit;
}

//----------------------------------------------------------------------//

/************************************************************************/

}

}

/************************************************************************/
